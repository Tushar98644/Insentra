import { Thread } from "@/db/models";
import connectToDB from "@/lib/mongoose";
import crypto from "crypto";
import Comment from "@/db/models/comment";
import { GoogleGenAI } from "@google/genai";
import axios from "axios";
import jwt from "jsonwebtoken";

const ai = new GoogleGenAI({
    apiKey: process.env.GOOGLE_API_KEY,
});

function generateGitHubAppJWT(): string {
    const now = Math.floor(Date.now() / 1000);
    const payload = {
        iat: now - 60,
        exp: now + 10 * 60,
        iss: process.env.GITHUB_APP_ID,
    };
    const privateKey = process.env.GITHUB_APP_PRIVATE_KEY?.replace(/\\n/g, "\n") || "";
    return jwt.sign(payload, privateKey, {
        algorithm: "RS256",
    });
}

async function getInstallationAccessToken(installationId: number): Promise<string> {
    const jwt = generateGitHubAppJWT();
    const response = await axios.post(
        `https://api.github.com/app/installations/${installationId}/access_tokens`,
        {},
        {
            headers: {
                Authorization: `Bearer ${jwt}`,
                Accept: "application/vnd.github+json",
            },
        }
    );
    return response.data.token;
}

async function streamSummarize(prompt: string): Promise<string> {
    const stream = await ai.models.generateContentStream({
        model: "gemini-2.5-flash",
        contents: prompt,
    });

    let result = "";
    for await (const chunk of stream) {
        if (chunk.text) result += chunk.text;
    }
    return result;
}

async function fetchDiff(url: string, token: string): Promise<string> {
    try {
        const res = await axios.get(url, {
            headers: {
                Authorization: `token ${token}`,
                Accept: "application/vnd.github.v3.diff",
            },
        });
        return res.data;
    } catch (error) {
        console.error("Error fetching diff:", error);
        return "Could not fetch diff";
    }
}

function formatCommitComment(commit: any, summary: string, repoFullName: string): string {
    const timestamp = new Date(commit.timestamp || Date.now()).toLocaleString("en-US", {
        timeZone: "Asia/Kolkata",
        dateStyle: "medium",
        timeStyle: "short",
    });

    const filesChanged = [
        ...(commit.added || []).map((f: string) => `  + ${f}`),
        ...(commit.modified || []).map((f: string) => `  ~ ${f}`),
        ...(commit.removed || []).map((f: string) => `  - ${f}`),
    ];

    return `🔄 NEW COMMIT DETECTED

📝 Commit Title: ${commit.message}
👤 Author: ${commit.author?.name || "Unknown"}
📅 Time: ${timestamp}
🔗 Repository: ${repoFullName}
🆔 Commit ID: ${commit.id?.slice(0, 7)}

📂 Files Changed (${filesChanged.length}):
${filesChanged.length > 0 ? filesChanged.slice(0, 10).join("\n") : "  No files listed"}
${filesChanged.length > 10 ? `\n  ... and ${filesChanged.length - 10} more files` : ""}

🤖 AI Analysis:
${summary}

─────────────────────────
Generated by AI Assistant`;
}

function formatPRComment(pr: any, action: string, summary: string, repoFullName: string): string {
    const timestamp = new Date(pr.updated_at || Date.now()).toLocaleString("en-US", {
        timeZone: "Asia/Kolkata",
        dateStyle: "medium",
        timeStyle: "short",
    });

    const actionEmoji =
        {
            opened: "🆕",
            synchronize: "🔄",
            closed: pr.merged ? "✅" : "❌",
            reopened: "🔄",
        }[action] || "📝";

    const actionText = action.charAt(0).toUpperCase() + action.slice(1);

    return `${actionEmoji} PULL REQUEST ${actionText.toUpperCase()}

📝 PR Title: ${pr.title}
👤 Author: ${pr.user?.login || "Unknown"}
📅 Time: ${timestamp}
🔗 Repository: ${repoFullName}
🔢 Pull Request #${pr.number}
🌿 Branch: ${pr.head?.ref} → ${pr.base?.ref}
${pr.html_url ? `🔗 URL: ${pr.html_url}` : ""}

📋 Description:
${pr.body ? pr.body.slice(0, 300) + (pr.body.length > 300 ? "..." : "") : "No description provided"}

🤖 AI Analysis:
${summary}

─────────────────────────
Generated by AI Assistant`;
}

export async function POST(req: Request) {
    const raw = await req.text();
    const sig = req.headers.get("X-Hub-Signature-256");
    const event = req.headers.get("X-Github-Event");
    const secret = process.env.GITHUB_WEBHOOK_SECRET;

    if (!sig || !secret) {
        return Response.json({ message: "Missing credentials" }, { status: 400 });
    }

    const hmac = crypto.createHmac("sha256", secret).update(raw).digest("hex");
    if (!crypto.timingSafeEqual(Buffer.from(`sha256=${hmac}`), Buffer.from(sig))) {
        return Response.json({ message: "Invalid signature" }, { status: 400 });
    }

    const payload = JSON.parse(raw);
    await connectToDB();

    const installationId = payload.installation?.id;
    const repoFullName = payload.repository?.full_name;
    const repoId = payload.repository?.id;

    if (!installationId || !repoId) {
        return Response.json({ message: "Missing installation or repository info" }, { status: 400 });
    }

    const thread = await Thread.findOne({
        "integration.githubId": repoId,
    });

    if (event === "ping") {
        return Response.json({ ok: true }, { status: 200 });
    }

    if (!thread) {
        return Response.json({ ok: true, message: "Thread not tracked" }, { status: 204 });
    }

    const token = await getInstallationAccessToken(installationId);

    if (event === "push") {
        for (const commit of payload.commits || []) {
            const diffUrl = `${commit.url}.diff`;
            const diff = await fetchDiff(diffUrl, token);

            const aiPrompt = `
Analyze this commit and provide a concise summary of what changed:

Repository: ${repoFullName}
Commit Message: ${commit.message}
Author: ${commit.author?.name}

Code Changes:
${diff}

Please provide a brief, technical summary of what this commit does. Focus on:
1. What functionality was added/changed/removed
2. Key technical changes showning the code changes
3. Impact on the codebase

Keep it under 150 words and use simple, clear language.`;

            const aiSummary = await streamSummarize(aiPrompt);
            const formattedComment = formatCommitComment(commit, aiSummary, repoFullName);

            await Comment.create({
                threadId: String(thread._id),
                author: "AI Assistant",
                authorAvatar:
                    "https://www.shutterstock.com/image-vector/chat-bot-icon-virtual-smart-600nw-2478937555.jpg",
                content: formattedComment,
            });
        }
        return Response.json({ ok: true }, { status: 200 });
    }

    if (event === "pull_request") {
        const pr = payload.pull_request;
        const diff = await fetchDiff(pr.diff_url, token);

        const aiPrompt = `
Analyze this pull request and provide a concise summary:

Repository: ${repoFullName}
PR Title: ${pr.title}
Action: ${payload.action}
Description: ${pr.body || "No description"}

Code Changes:
${diff}

Please provide a brief summary covering:
1. What this PR accomplishes
2. Key changes made showing the code changes
3. Potential impact

Keep it under 200 words and use clear, non-technical language when possible.`;

        const aiSummary = await streamSummarize(aiPrompt);
        const formattedComment = formatPRComment(pr, payload.action, aiSummary, repoFullName);

        await Comment.create({
            threadId: String(thread._id),
            author: "AI Assistant",
            authorAvatar: "https://www.shutterstock.com/image-vector/chat-bot-icon-virtual-smart-600nw-2478937555.jpg",
            content: formattedComment,
        });

        return Response.json({ ok: true }, { status: 200 });
    }

    return Response.json({ ok: true }, { status: 204 });
}
